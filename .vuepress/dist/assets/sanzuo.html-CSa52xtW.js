import{_ as t,c as r,a as s,o as n}from"./app-CKllp0ht.js";const l={};function g(i,o){return n(),r("div",null,[...o[0]||(o[0]=[s('<h1 id="一、面试自我介绍-论文项目部分" tabindex="-1"><a class="header-anchor" href="#一、面试自我介绍-论文项目部分"><span>一、面试自我介绍（论文项目部分）</span></a></h1><p>在我参与发表的这篇论文《Bridging Causal Discovery and Fuzzy Systems》中，我主要负责整个项目的<strong>代码实现、实验验证与数据分析</strong>部分。我们的核心目标是<strong>将因果发现与模糊系统相结合，构建一个既高效又可解释的规则生成框架</strong>。</p><p>我具体的工作可以分为以下几个方面：</p><p><strong>1. 核心框架实现 (Core Framework Implementation):</strong> 我独立实现了论文提出的<strong>CAMUV-TSK 端到端建模 pipeline</strong>。这包括：</p><ul><li><p><strong>数据预处理模块</strong>：负责加载来自Kaggle和UCI的9个不同领域的数据集，并进行标准化、缺失值处理，以及按8:1:1的比例划分训练集、验证集和测试集。</p></li><li><p><strong>因果发现与特征筛选模块</strong>：我集成了<strong>CAMUV算法</strong>（基于其理论公式），用于从观测数据中学习变量间的因果图，并识别出目标变量的<strong>马尔可夫毯（Markov Blanket）</strong>，即其直接因果父节点。这一步的核心是根据学到的因果邻接矩阵 <code>A</code> 对原始特征进行过滤 (<code>X_causal = X ⊙ A</code>)，只保留与输出有直接因果关系的变量，从源头上减少冗余特征。</p></li><li><p><strong>TSK模糊系统构建与训练模块</strong>：我实现了<strong>Takagi-Sugeno-Kang模糊推理系统</strong>。使用K-means对因果过滤后的特征进行聚类，以初始化高斯隶属函数的中心。系统的前件（IF部分）使用高斯函数计算隶属度，后件（THEN部分）是线性函数。我采用<strong>梯度下降法（如Adam优化器）</strong> 来联合优化隶属函数参数和后续线性函数的权重，损失函数为交叉熵损失加L2正则项。。</p></li><li><p><strong>动态规则修剪机制</strong>：在训练过程中，我实现了一个<strong>动态规则剪枝策略</strong>：在每个epoch后，会计算每条规则的平均激活度，<strong>自动移除那些激活度持续低于阈值（如0.01）的冗余规则</strong>，从而确保最终生成的规则库非常精简和可解释。</p></li></ul><p><strong>2. 对比实验设计与执行 (Comparative Experiment Design &amp; Execution):</strong> 为了全面评估我们方法的优越性，我设计并执行了严格的对比实验。</p><ul><li><strong>基准模型</strong>：我实现了另外四种主流因果发现算法（<strong>DirectLiNGAM, BOSS, GRaSP, DECI</strong>）与同一TSK模型的集成，形成了TSK-DL、TSK-BOSS、TSK-GRaSP和TSK-DECI这四个强大的基准模型。</li><li><strong>评估流程</strong>：对所有模型，采用<strong>完全相同的</strong>数据集划分、预处理流程和TSK模型结构（如规则数），确保对比的公平性。主要评估指标是<strong>分类准确率（ACC）</strong>。</li><li><strong>结果分析</strong>：我负责运行所有实验并汇总结果（如表II所示）。分析表明，我们的<strong>TSK-CAMUV模型在绝大多数数据集上取得了最佳性能</strong>，平均准确率相比其他基准模型有约5%的提升。特别是在非线性关系明显的数据集（如Weather Forecast, Loan）上，优势尤为显著，这验证了CAMUV在处理非线性因果关系的强大能力。</li></ul><p>你实现了以下<strong>五种模型的对比</strong>：</p><table><thead><tr><th>模型名称</th><th>因果发现方法</th><th>特点</th></tr></thead><tbody><tr><td>TSK-DirectLiNGAM</td><td>DirectLiNGAM</td><td>线性、非高斯</td></tr><tr><td>TSK-CAMUV（本文）</td><td>CAMUV</td><td>非线性、含未观测变量</td></tr><tr><td>TSK-BOSS</td><td>BOSS</td><td>基于排序搜索</td></tr><tr><td>TSK-GRaSP</td><td>GRaSP</td><td>稀疏置换贪婪松弛</td></tr><tr><td>TSK-DECI</td><td>DECI</td><td>端到端深度因果推理</td></tr></tbody></table><p><strong>3. 理论基础与结论 (Theoretical Basis &amp; Conclusion):</strong></p><ul><li><strong>理论基础</strong>：我们的工作建立在两个核心理论上：1) <strong>CAMUV算法</strong>，它能处理非线性关系和未观测变量，解决了传统方法（如DirectLiNGAM）的线性假设局限；2) <strong>TSK模糊系统</strong>，它将可解释的模糊规则与神经网络的学习能力相结合。</li><li><strong>项目结论</strong>：通过我的代码实现和实验验证，我们得出三个核心结论： <ol><li><strong>因果驱动提升性能与可解释性</strong>：基于因果关系的特征选择能有效过滤虚假相关，生成更精简、更准确的规则集。</li><li><strong>处理复杂数据优势明显</strong>：CAMUV-TSK框架在处理非线性、含隐变量的真实世界数据时，鲁棒性更强。</li><li><strong>通用性强</strong>：我们的方法在医疗、金融、环境监测等多种领域的数据集上均表现良好，展现了其通用性。</li></ol></li></ul><p>总之，在这个项目中，我不仅将理论算法转化为可运行的代码，更通过严谨的实验设计证明了其有效性，全面锻炼了我将前沿学术理论应用于解决实际问题的工程与研究能力。</p><h1 id="二、预设问题与答案-q-a" tabindex="-1"><a class="header-anchor" href="#二、预设问题与答案-q-a"><span>二、预设问题与答案 (Q&amp;A)</span></a></h1><p><strong>Q1: 为什么选择CAMUV而不是其他因果发现算法？比如为什么不用PC算法？</strong></p><p><strong>A1:</strong> 选择CAMUV主要基于其两个关键优势，这也是我们论文要解决的核心问题：</p><ol><li><strong>处理非线性关系</strong>：PC算法等基于条件独立性检验的方法通常隐含着线性假设，而在真实世界（如天气、医疗数据）中非线性关系非常普遍。CAMUV explicitly地使用了<strong>加性非线性模型</strong>，能更好地捕捉这些复杂关系。</li><li><strong>容忍未观测变量</strong>：传统因果发现算法（包括PC）通常要求“没有未观测的混杂因子”，这个假设在现实中很难满足。CAMUV在模型定义中就<strong>包含了未观测变量</strong>，并能标识出哪些因果边因隐藏变量的存在而无法确定，这大大增强了其实用性和可靠性。PC算法在存在未观测变量时可能会输出大量无法确定的边，实用性降低。</li></ol><p><strong>Q2: 在代码实现中，你遇到的最大挑战是什么？是怎么解决的？</strong></p><p><strong>A2:</strong> 最大的挑战是<strong>如何将离散的因果图结构（来自CAMUV）与需要连续梯度优化的TSK模型进行有效且高效的集成</strong>。</p><ul><li><strong>挑战在于</strong>：CAMUV的输出是一个表示因果关系的邻接矩阵（0和1），这是一个离散的、不可微的结构。而TSK的训练完全依赖于梯度下降。</li><li><strong>我的解决方案</strong>：我没有尝试去优化因果图本身，而是采用了<strong>两阶段管道（Two-stage Pipeline）</strong> 策略。 <ol><li><strong>阶段一（因果发现）</strong>：在训练集上独立运行CAMUV算法，得到固定的因果邻接矩阵 <code>A</code>。</li><li><strong>阶段二（模糊系统训练）</strong>：利用 <code>A</code> 对输入特征进行<strong>掩码（mask）</strong>，过滤掉非因果特征，然后将过滤后的特征矩阵输入到TSK模型中进行端到端的梯度优化。 这样，就将不可微的因果发现问题转换为了一个可微的监督学习问题，巧妙地解决了两者的兼容性问题。</li></ol></li></ul><p><strong>Q3: 你如何评估模型的可解释性？除了准确率，还有别的指标吗？</strong></p><p><strong>A3:</strong> 除了准确率这个性能指标，我们对可解释性的评估主要体现在<strong>定性</strong>和<strong>定量</strong>两个层面：</p><ol><li><strong>定量指标</strong>： <ul><li><strong>规则数量</strong>：我们统计并比较了不同方法最终生成的规则数。我们的方法由于有因果过滤和动态修剪，<strong>规则库规模通常最小</strong>，这直接体现了模型的简洁性。</li><li><strong>规则激活度</strong>：我们分析了保留下的规则的激活分布，确保规则不是“僵尸规则”，而是被有效使用的。</li></ul></li><li><strong>定性分析</strong>： <ul><li><strong>规则检查</strong>：我们会人工审视生成的规则。例如，在心脏病预测数据集中，我们的模型生成的规则前件只包含“最大心率”、“胸痛类型”等被CAMUV判定为有直接因果关系的变量，这与医学先验知识是一致的。而相关性的方法可能会产生包含“年龄”或“性别”与“心脏病”直接关联的规则，这种规则虽然统计上相关，但因果性模糊，可解释性差。</li><li><strong>特征重要性</strong>：我们对比了因果驱动和相关性驱动方法选出的特征，发现我们的方法选出的特征集更精简、更符合领域知识。</li></ul></li></ol><p><strong>Q4: CAMUV听起来计算成本很高，你们是如何处理的？</strong></p><p><strong>A4:</strong> 您提到了一个很好的点。CAMUV确实比线性方法计算复杂度高。</p><ol><li><strong>在我们的实验中</strong>，由于使用的数据集规模（最多几千个样本，几十个特征）属于中小型，在现代计算硬件上<strong>直接运行CAMUV是完全可行的</strong>，不需要特殊优化。</li><li><strong>对于未来大规模数据的应用</strong>，我们在结论中也提到了这是未来的工作方向。可能的解决方案包括： <ul><li>采用<strong>随机采样</strong>或<strong>特征预选</strong>来减少输入维度。</li><li>开发CAMUV的<strong>分布式计算</strong>或<strong>增量学习</strong>版本。</li><li>探索<strong>轻量级近似算法</strong>来估计因果强度。 虽然计算成本较高，但用它来生成一个高质量、可解释的规则库可以被看作是一种“一次性投资”。一旦规则库生成，在实际应用中进行推理的速度是非常快的，因为TSK系统本质上就是一组简单的数学运算。</li></ul></li></ol><p><strong>Q5: 如果让你继续这个项目，下一步你会做什么？</strong></p><p><strong>A5:</strong> 我会从两个方向继续深入：</p><ol><li><strong>深度与可解释性工具结合</strong>：将我们生成的因果模糊规则与<strong>SHAP、LIME</strong>等主流可解释性AI工具进行对比。不仅可以比较性能，更重要的是可以验证这些事后解释工具给出的特征重要性是否与我们模型事先学到的因果特征一致，这能进一步验证我们模型的可信度。</li><li><strong>扩展性与应用</strong>：<strong>测试框架在高维数据（如基因组数据、图像特征数据）上的表现</strong>。当前的特征筛选能力在高维场景下可能会面临挑战，这需要探索如何将CAMUV与降维技术或稀疏学习相结合，这是验证其实际应用潜力的关键一步。</li></ol><h1 id="三、细节问题" tabindex="-1"><a class="header-anchor" href="#三、细节问题"><span>三、细节问题</span></a></h1><p>好的，我们来对您刚刚回答中涉及的几个核心概念进行更细致、更直观的解释。这些都是在面试中展示您技术深度的关键点。</p><hr><h3 id="_1-规则准确率是怎么算的" tabindex="-1"><a class="header-anchor" href="#_1-规则准确率是怎么算的"><span>1. 规则准确率是怎么算的？</span></a></h3><p>这是一个非常重要的概念澄清。<strong>“规则准确率”并不是单条规则的准确率</strong>，而是指整个模糊系统（即所有规则共同作用）的预测准确率。</p><ul><li><strong>核心思想</strong>：TSK模糊系统的规则是<strong>协同工作</strong>的。对于一个输入样本，系统通常会激活多条规则（每条规则激活程度不同），然后将这些规则的输出进行加权平均，得到最终预测结果。我们评估的是这个最终预测结果的准确性。</li><li><strong>计算方法</strong>： <ol><li>对于测试集中的每一个样本，输入到训练好的TSK模型中。</li><li>模型会计算出一个最终的预测值 <code>ŷ</code>（对于分类问题，<code>ŷ</code> 是一个概率向量，表示属于各个类别的概率）。</li><li>将预测的类别 <code>argmax(ŷ)</code> 与真实的类别标签 <code>y_true</code> 进行比较。 4 <strong>准确率（Accuracy）</strong> = （预测正确的样本数） / （测试集总样本数）</li></ol></li></ul><p><strong>简单来说</strong>：我们并不单独考核每一条规则的表现，而是看所有规则组成的“团队”的整体表现。这个“团队”的决策准确率，就是我们报告中表格II所展示的 <strong>ACC</strong> 值。</p><hr><h3 id="_2-梯度下降法-adam-、联合优化与损失函数" tabindex="-1"><a class="header-anchor" href="#_2-梯度下降法-adam-、联合优化与损失函数"><span>2. 梯度下降法（Adam）、联合优化与损失函数</span></a></h3><p>这段话描述了您如何<strong>训练</strong>TSK模型的参数，是您代码工作的核心。</p><ul><li><p><strong>要优化的参数（θ）</strong>：</p><ul><li><strong>隶属函数参数</strong>：例如，如果您使用高斯函数 <code>μ(x) = exp(-(x - m)² / (2σ²))</code>，那么参数 <code>m</code> (中心) 和 <code>σ</code> (宽度) 就是需要优化的。</li><li><strong>后件线性函数的权重</strong>：即每条规则 <code>R_r</code> 的 <code>β_r,0</code>（偏置）和 <code>β_r,1</code>, <code>β_r,2</code>, ... <code>β_r,D</code>（权重）。</li></ul></li><li><p><strong>损失函数（Loss Function）</strong>：这是模型训练的目标，我们需要最小化它。</p><ul><li><strong>交叉熵损失（Cross-Entropy Loss, L_CE）</strong>：这是<strong>主任务驱动</strong>。它衡量模型预测的概率分布 <code>ŷ</code> 与真实标签的分布（one-hot编码）之间的差异。<strong>它的唯一目的是提高分类准确率。</strong></li><li><strong>L2正则项（L_reg）</strong>：这是<strong>防止过拟合的约束</strong>。它会对模型参数（特别是后件权重 <code>β</code>）的数值大小进行惩罚（<code>L_reg = λ * ||β||²</code>）。参数值越大，惩罚越大。这可以迫使模型学习更简单、更平滑的函数，避免对训练数据过度拟合，从而提升泛化能力。</li><li><strong>总损失</strong>：<code>L = L_CE + L_reg</code>。优化过程就是在<strong>准确性和模型复杂度</strong>之间寻找最佳平衡。</li></ul></li><li><p><strong>联合优化与Adam优化器</strong>：</p><ul><li><strong>“联合”</strong> 意味着所有上述参数（<code>m</code>, <code>σ</code>, <code>β</code>）被同时、一起优化。</li><li><strong>梯度下降法</strong>：通过计算损失函数 <code>L</code> 对所有参数 <code>θ</code> 的<strong>梯度（偏导数）</strong>，即 <code>∇θL</code>，来知道如何调整参数才能使损失下降。梯度方向指示了参数更新的方向。</li><li><strong>Adam优化器</strong>：是一种非常高效、常用的梯度下降算法。它像是一个“智能调节器”，不仅考虑当前梯度，还考虑历史梯度的动量（惯性）和变化率（自适应学习率），使得参数更新过程更稳定、更快地收敛到最优解。</li><li><strong>更新公式</strong>：<code>θ ← θ - η * ∇θL</code> （<code>η</code> 是学习率，由Adam动态调节）。您代码中的 <code>Update θ ← θ - η∇θ(ℒ_CE + ℒ_reg)</code> 这一行正是实现了这个过程。</li></ul></li></ul><hr><h3 id="_3-每条规则的平均激活度" tabindex="-1"><a class="header-anchor" href="#_3-每条规则的平均激活度"><span>3. 每条规则的平均激活度</span></a></h3><p>这是一个关于<strong>规则剪枝</strong>和<strong>模型可解释性</strong>的关键指标。</p><ul><li><strong>激活度（Firing Strength）<code>f_r(x)</code></strong>：衡量一条规则 <code>R_r</code> 对于一个输入样本 <code>x</code> 的<strong>适用程度</strong>。它是通过将样本 <code>x</code> 的各个特征值代入规则前件的隶属函数中，然后相乘得到的（<code>f_r(x) = μ_r,1(x1) * μ_r,2(x2) * ...</code>）。值越高，说明这条规则与当前样本越匹配。</li><li><strong>归一化激活度 <code>f_r(x)</code></strong>：将所有规则的激活度进行归一化（Softmax），使其和为1，可以看作是每条规则在最终决策中的<strong>投票权重</strong>。</li><li><strong>平均激活度</strong>： <ul><li><strong>计算</strong>：在整个训练集或一个Batch的 <code>N</code> 个样本上，对某条规则 <code>R_r</code> 的归一化激活度求平均：<code>(1/N) * Σ </code>f_r(x⁽ᵐ⁾)`。</li><li><strong>含义</strong>：这条规则<strong>平均有多大的影响力</strong>。如果一条规则的平均激活度很低（例如您设定的阈值0.01），意味着它几乎对所有样本都“不适用”，是个可有可无的“懒规则”。</li></ul></li><li><strong>您的操作</strong>：您在训练循环中<strong>动态监测</strong>这个值。一旦发现某条规则的平均激活度持续低于阈值，就将其从规则库中<strong>移除</strong>。这样做的好处是： <ol><li><strong>精简规则库</strong>：使模型更紧凑，计算更快。</li><li><strong>提升可解释性</strong>：留下的都是活跃的、有贡献的规则，方便人类专家理解和信任。</li><li><strong>可能提升泛化能力</strong>：移除无关规则相当于一种正则化，防止模型过拟合。</li></ol></li></ul><hr><h3 id="_4-未观测变量" tabindex="-1"><a class="header-anchor" href="#_4-未观测变量"><span>4. 未观测变量</span></a></h3><p>这是CAMUV算法相比其他方法（如DirectLiNGAM）的核心优势所在，也是因果发现中的一大挑战。</p><ul><li><strong>定义</strong>：也常被称为<strong>隐变量</strong>或<strong>潜变量</strong>。指的是那些<strong>对系统有重要影响，但我们的数据集中没有收集到的变量</strong>。</li><li><strong>例子</strong>：在论文提到的“心脏病预测”例子中： <ul><li><strong>观测变量</strong>：年龄、性别、胆固醇水平、静息血压等（数据集中有的）。</li><li><strong>未观测变量</strong>：“炎症因子水平”。这个指标可能很重要，但可能因为检测成本高或技术限制，并没有被收录在这个公开数据集中。</li></ul></li><li><strong>带来的问题</strong>：如果忽略未观测变量，会导致<strong>虚假相关</strong>或<strong>因果误判</strong>。 <ul><li>比如，“胆固醇”和“静息血压”可能本身没有直接的因果联系，但它们都受到同一个未观测变量“炎症因子”的影响而同时发生变化。纯相关性分析（如WM方法）或假设无隐变量的因果发现算法（如CAM）可能会错误地得出它们之间有直接因果关系的结论。</li></ul></li><li><strong>CAMUV如何解决</strong>： <ul><li>CAMUV的数学模型（公式1） explicitly地包含了未观测变量 <code>Y</code>。</li><li>它通过理论分析（如论文提到的Lemma 1）能够识别出哪些因果边<strong>因为未观测变量的存在而无法确定</strong>，并在输出的因果图中将它们标记为“模糊”的。</li><li>这样，CAMUV给出的结果不再是“肯定有边”或“肯定没边”，而是更保守和可靠的“这些边确定有，那些边确定没有，而这些边因为隐变量存在所以无法确定”。<strong>这种诚实（Honesty）是其强大鲁棒性和科学性的体现。</strong></li></ul></li></ul><p>希望这些更详细的解释能帮助您更自信、更深入地在面试中展示您的工作！</p><h3 id="_5-camuv算法-causal-additive-model-with-unobserved-variables" tabindex="-1"><a class="header-anchor" href="#_5-camuv算法-causal-additive-model-with-unobserved-variables"><span>5. CAMUV算法（Causal Additive Model with Unobserved Variables）</span></a></h3><p>CAM<strong>带有未观测变量的因果加性模型</strong></p><ul><li>建模公式： <img src="https://images.unsplash.com/photo-1635070041078-e43d6d8e8a46?w=600&amp;h=300&amp;fit=crop" alt="CAMUV公式"></li><li>能处理未观测变量和非线性关系，避免虚假因果边。</li></ul><h3 id="_6-tsk模糊系统" tabindex="-1"><a class="header-anchor" href="#_6-tsk模糊系统"><span>6. TSK模糊系统</span></a></h3><ul><li>规则形式： <img src="https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&amp;h=300&amp;fit=crop" alt="TSK规则"></li><li>使用高斯隶属函数，支持梯度优化。</li></ul><h1 id="四、论文主要创新点" tabindex="-1"><a class="header-anchor" href="#四、论文主要创新点"><span>四、论文主要创新点</span></a></h1><ol><li><p><strong>引入因果发现提升模糊系统可解释性</strong>：</p><ul><li>传统方法（如Wang-Mendel）仅基于相关性生成规则，导致规则冗余、解释性差。</li><li>本工作使用<strong>CAMUV算法</strong>识别目标变量的<strong>直接因果特征（Markov Blanket）</strong>，剔除无关变量，提升规则质量。</li></ul></li><li><p><strong>处理非线性与未观测变量</strong>：</p><ul><li>CAMUV能处理<strong>非线性关系</strong>和<strong>部分未观测变量</strong>，优于仅适用于线性数据的DirectLiNGAM等方法。</li></ul></li><li><p><strong>动态规则生成与优化</strong>：</p><ul><li>结合TSK模糊系统，使用<strong>梯度下降优化规则参数</strong>，支持动态规则修剪（低激活规则被移除），提升模型简洁性与泛化能力。</li></ul></li><li><p><strong>多数据集验证</strong>：</p><ul><li>在9个真实数据集上验证，相比TSK-DirectLiNGAM、TSK-BOSS等方法，平均准确率提升约5%。</li></ul></li></ol>',55)])])}const a=t(l,[["render",g]]),d=JSON.parse('{"path":"/blogs/other/sanzuo.html","title":"三作论文项目详解","lang":"en-US","frontmatter":{"title":"三作论文项目详解","date":"2024/01/06","tags":["学术研究","因果发现","模糊系统","机器学习"],"categories":["学术成果"],"heroImage":"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=800&h=400&fit=crop"},"headers":[{"level":3,"title":"1. 规则准确率是怎么算的？","slug":"_1-规则准确率是怎么算的","link":"#_1-规则准确率是怎么算的","children":[]},{"level":3,"title":"2. 梯度下降法（Adam）、联合优化与损失函数","slug":"_2-梯度下降法-adam-、联合优化与损失函数","link":"#_2-梯度下降法-adam-、联合优化与损失函数","children":[]},{"level":3,"title":"3. 每条规则的平均激活度","slug":"_3-每条规则的平均激活度","link":"#_3-每条规则的平均激活度","children":[]},{"level":3,"title":"4. 未观测变量","slug":"_4-未观测变量","link":"#_4-未观测变量","children":[]},{"level":3,"title":"5. CAMUV算法（Causal Additive Model with Unobserved Variables）","slug":"_5-camuv算法-causal-additive-model-with-unobserved-variables","link":"#_5-camuv算法-causal-additive-model-with-unobserved-variables","children":[]},{"level":3,"title":"6. TSK模糊系统","slug":"_6-tsk模糊系统","link":"#_6-tsk模糊系统","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"filePathRelative":"blogs/other/三作.md"}');export{a as comp,d as data};
